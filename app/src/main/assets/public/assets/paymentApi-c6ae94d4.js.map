{"version":3,"file":"paymentApi-c6ae94d4.js","sources":["../../src/api/paymentApi.ts"],"sourcesContent":["// Payment API service for handling Stripe integration\r\n// This would typically be a backend service, but we'll create a mock implementation\r\n// for demonstration purposes\r\n\r\nexport interface CheckoutSessionRequest {\r\n  planId: string;\r\n  userId: string;\r\n  stripePriceId: string;\r\n  successUrl: string;\r\n  cancelUrl: string;\r\n}\r\n\r\nexport interface CheckoutSessionResponse {\r\n  sessionId: string;\r\n}\r\n\r\nexport interface PaymentVerificationRequest {\r\n  sessionId: string;\r\n  userId: string;\r\n}\r\n\r\nexport interface SubscriptionResponse {\r\n  id: string;\r\n  status: string;\r\n  current_period_start: number;\r\n  current_period_end: number;\r\n  cancel_at_period_end: boolean;\r\n}\r\n\r\nexport class PaymentAPI {\r\n  private static instance: PaymentAPI;\r\n  private baseUrl: string;\r\n\r\n  public static getInstance(): PaymentAPI {\r\n    if (!PaymentAPI.instance) {\r\n      PaymentAPI.instance = new PaymentAPI();\r\n    }\r\n    return PaymentAPI.instance;\r\n  }\r\n\r\n  constructor() {\r\n    // In production, this would be your backend API URL\r\n    this.baseUrl = import.meta.env.VITE_API_BASE_URL || 'http://localhost:3001/api';\r\n  }\r\n\r\n  // Create checkout session\r\n  async createCheckoutSession(request: CheckoutSessionRequest): Promise<CheckoutSessionResponse> {\r\n    try {\r\n      // In a real implementation, this would call your backend\r\n      // For now, we'll simulate the API call\r\n      console.log('Creating checkout session:', request);\r\n      \r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // Return a mock session ID\r\n      return {\r\n        sessionId: `cs_test_${Math.random().toString(36).substr(2, 9)}`\r\n      };\r\n    } catch (error) {\r\n      console.error('Error creating checkout session:', error);\r\n      throw new Error('Failed to create checkout session');\r\n    }\r\n  }\r\n\r\n  // Verify payment\r\n  async verifyPayment(request: PaymentVerificationRequest): Promise<{ subscription: SubscriptionResponse }> {\r\n    try {\r\n      console.log('Verifying payment:', request);\r\n      \r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // Return mock subscription data\r\n      return {\r\n        subscription: {\r\n          id: `sub_${Math.random().toString(36).substr(2, 9)}`,\r\n          status: 'active',\r\n          current_period_start: Math.floor(Date.now() / 1000),\r\n          current_period_end: Math.floor(Date.now() / 1000) + (30 * 24 * 60 * 60), // 30 days\r\n          cancel_at_period_end: false\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('Error verifying payment:', error);\r\n      throw new Error('Payment verification failed');\r\n    }\r\n  }\r\n\r\n  // Cancel subscription\r\n  async cancelSubscription(subscriptionId: string, userId: string): Promise<void> {\r\n    try {\r\n      console.log('Canceling subscription:', { subscriptionId, userId });\r\n      \r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      console.log('Subscription canceled successfully');\r\n    } catch (error) {\r\n      console.error('Error canceling subscription:', error);\r\n      throw new Error('Failed to cancel subscription');\r\n    }\r\n  }\r\n\r\n  // Reactivate subscription\r\n  async reactivateSubscription(subscriptionId: string, userId: string): Promise<void> {\r\n    try {\r\n      console.log('Reactivating subscription:', { subscriptionId, userId });\r\n      \r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      console.log('Subscription reactivated successfully');\r\n    } catch (error) {\r\n      console.error('Error reactivating subscription:', error);\r\n      throw new Error('Failed to reactivate subscription');\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const paymentAPI = PaymentAPI.getInstance(); "],"names":["_PaymentAPI","constructor","__publicField","this","baseUrl","VITE_API_BASE_URL","getInstance","instance","createCheckoutSession","request","console","log","Promise","resolve","setTimeout","sessionId","Math","random","toString","substr","error","Error","verifyPayment","subscription","id","status","current_period_start","floor","Date","now","current_period_end","cancel_at_period_end","cancelSubscription","subscriptionId","userId","reactivateSubscription","PaymentAPI","paymentAPI"],"mappings":"gKA6BO,MAAMA,EAAN,MAAMA,EAWX,WAAAC,GATQC,EAAAC,KAAA,WAWDA,KAAAC,QAA0B,GAAAC,mBAAqB,2BACtD,CAVA,kBAAcC,GAIZ,OAHKN,EAAWO,WACHP,EAAAO,SAAW,IAAIP,GAErBA,EAAWO,QACpB,CAQA,2BAAMC,CAAsBC,GACtB,IASK,OANCC,QAAAC,IAAI,6BAA8BF,SAGpC,IAAIG,SAAQC,GAAWC,WAAWD,EAAS,OAG1C,CACLE,UAAW,WAAWC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,YAEtDC,GAED,MADEV,QAAAU,MAAM,mCAAoCA,GAC5C,IAAIC,MAAM,oCAClB,CACF,CAGA,mBAAMC,CAAcb,GACd,IAOK,OANCC,QAAAC,IAAI,qBAAsBF,SAG5B,IAAIG,SAAQC,GAAWC,WAAWD,EAAS,OAG1C,CACLU,aAAc,CACZC,GAAI,OAAOR,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,KAChDM,OAAQ,SACRC,qBAAsBV,KAAKW,MAAMC,KAAKC,MAAQ,KAC9CC,mBAAoBd,KAAKW,MAAMC,KAAKC,MAAQ,KAAS,OACrDE,sBAAsB,UAGnBX,GAED,MADEV,QAAAU,MAAM,2BAA4BA,GACpC,IAAIC,MAAM,8BAClB,CACF,CAGA,wBAAMW,CAAmBC,EAAwBC,GAC3C,IACFxB,QAAQC,IAAI,0BAA2B,CAAEsB,iBAAgBC,iBAGnD,IAAItB,SAAQC,GAAWC,WAAWD,EAAS,OAEjDH,QAAQC,IAAI,4CACLS,GAED,MADEV,QAAAU,MAAM,gCAAiCA,GACzC,IAAIC,MAAM,gCAClB,CACF,CAGA,4BAAMc,CAAuBF,EAAwBC,GAC/C,IACFxB,QAAQC,IAAI,6BAA8B,CAAEsB,iBAAgBC,iBAGtD,IAAItB,SAAQC,GAAWC,WAAWD,EAAS,OAEjDH,QAAQC,IAAI,+CACLS,GAED,MADEV,QAAAU,MAAM,mCAAoCA,GAC5C,IAAIC,MAAM,oCAClB,CACF,GAvFAnB,EADWF,EACI,YADV,IAAMoC,EAANpC,EA4FM,MAAAqC,EAAaD,EAAW9B"}