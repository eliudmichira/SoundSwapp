{"version":3,"file":"ui-vendor-a6bf4b8c.js","sources":["../../node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs","../../node_modules/framer-motion/dist/es/utils/use-constant.mjs","../../node_modules/framer-motion/dist/es/utils/is-browser.mjs","../../node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs","../../node_modules/framer-motion/dist/es/context/PresenceContext.mjs","../../node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/utils.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs","../../node_modules/framer-motion/dist/es/context/LazyContext.mjs","../../node_modules/framer-motion/dist/es/motion/features/definitions.mjs","../../node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs","../../node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs","../../node_modules/framer-motion/dist/es/render/components/create-proxy.mjs","../../node_modules/framer-motion/dist/es/context/MotionContext/index.mjs","../../node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs","../../node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs","../../node_modules/framer-motion/dist/es/render/utils/variant-props.mjs","../../node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs","../../node_modules/framer-motion/dist/es/context/MotionContext/create.mjs","../../node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs","../../node_modules/framer-motion/dist/es/motion/utils/symbol.mjs","../../node_modules/framer-motion/dist/es/utils/is-ref-object.mjs","../../node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs","../../node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs","../../node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs","../../node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs","../../node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs","../../node_modules/framer-motion/dist/es/motion/index.mjs","../../node_modules/framer-motion/dist/es/motion/features/load-features.mjs","../../node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs","../../node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs","../../node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","../../node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs","../../node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs","../../node_modules/framer-motion/dist/es/render/html/use-props.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/path.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs","../../node_modules/framer-motion/dist/es/render/svg/use-props.mjs","../../node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs","../../node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs","../../node_modules/framer-motion/dist/es/render/dom/use-render.mjs","../../node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs","../../node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs","../../node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs","../../node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs","../../node_modules/framer-motion/dist/es/render/html/config-motion.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs","../../node_modules/framer-motion/dist/es/render/svg/config-motion.mjs","../../node_modules/framer-motion/dist/es/render/components/create-factory.mjs","../../node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs","../../node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs","../../node_modules/framer-motion/dist/es/render/utils/setters.mjs","../../node_modules/framer-motion/dist/es/value/use-will-change/add-will-change.mjs","../../node_modules/framer-motion/dist/es/value/use-will-change/is.mjs","../../node_modules/framer-motion/dist/es/animation/optimized-appear/get-appear-id.mjs","../../node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs","../../node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs","../../node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs","../../node_modules/framer-motion/dist/es/animation/utils/is-transition-defined.mjs","../../node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs","../../node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs","../../node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","../../node_modules/framer-motion/dist/es/render/utils/get-variant-context.mjs","../../node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","../../node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs","../../node_modules/framer-motion/dist/es/motion/features/Feature.mjs","../../node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs","../../node_modules/framer-motion/dist/es/motion/features/animations.mjs","../../node_modules/framer-motion/dist/es/motion/features/animation/index.mjs","../../node_modules/framer-motion/dist/es/events/add-dom-event.mjs","../../node_modules/framer-motion/dist/es/events/event-info.mjs","../../node_modules/framer-motion/dist/es/events/add-pointer-event.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/models.mjs","../../node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","../../node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","../../node_modules/framer-motion/dist/es/projection/utils/measure.mjs","../../node_modules/framer-motion/dist/es/utils/get-context-window.mjs","../../node_modules/framer-motion/dist/es/utils/distance.mjs","../../node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","../../node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","../../node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","../../node_modules/framer-motion/dist/es/gestures/pan/index.mjs","../../node_modules/framer-motion/dist/es/projection/node/state.mjs","../../node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","../../node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","../../node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","../../node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","../../node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","../../node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","../../node_modules/framer-motion/dist/es/projection/shared/stack.mjs","../../node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","../../node_modules/framer-motion/dist/es/utils/delay.mjs","../../node_modules/framer-motion/dist/es/animation/animate/single-value.mjs","../../node_modules/framer-motion/dist/es/projection/styles/transform.mjs","../../node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","../../node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","../../node_modules/framer-motion/dist/es/motion/features/drag.mjs","../../node_modules/framer-motion/dist/es/gestures/drag/index.mjs","../../node_modules/framer-motion/dist/es/gestures/hover.mjs","../../node_modules/framer-motion/dist/es/gestures/press.mjs","../../node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","../../node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs","../../node_modules/framer-motion/dist/es/motion/features/gestures.mjs","../../node_modules/framer-motion/dist/es/gestures/focus.mjs","../../node_modules/framer-motion/dist/es/motion/features/layout.mjs","../../node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","../../node_modules/framer-motion/dist/es/render/store.mjs","../../node_modules/framer-motion/dist/es/render/VisualElement.mjs","../../node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","../../node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","../../node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","../../node_modules/framer-motion/dist/es/render/html/utils/render.mjs","../../node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs","../../node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/render.mjs","../../node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","../../node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs","../../node_modules/framer-motion/dist/es/render/components/motion/create.mjs"],"sourcesContent":["\"use client\";\nimport { createContext } from 'react';\n\nconst LayoutGroupContext = createContext({});\n\nexport { LayoutGroupContext };\n","import { useRef } from 'react';\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n    const ref = useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\nexport { useConstant };\n","const isBrowser = typeof window !== \"undefined\";\n\nexport { isBrowser };\n","import { useLayoutEffect, useEffect } from 'react';\nimport { isBrowser } from './is-browser.mjs';\n\nconst useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n\nexport { useIsomorphicLayoutEffect };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * @public\n */\nconst PresenceContext = \n/* @__PURE__ */ createContext(null);\n\nexport { PresenceContext };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * @public\n */\nconst MotionConfigContext = createContext({\n    transformPagePoint: (p) => p,\n    isStatic: false,\n    reducedMotion: \"never\",\n});\n\nexport { MotionConfigContext };\n","\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport { isHTMLElement } from 'motion-dom';\nimport * as React from 'react';\nimport { useId, useRef, useContext, useInsertionEffect } from 'react';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\n\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\nclass PopChildMeasure extends React.Component {\n    getSnapshotBeforeUpdate(prevProps) {\n        const element = this.props.childRef.current;\n        if (element && prevProps.isPresent && !this.props.isPresent) {\n            const parent = element.offsetParent;\n            const parentWidth = isHTMLElement(parent)\n                ? parent.offsetWidth || 0\n                : 0;\n            const size = this.props.sizeRef.current;\n            size.height = element.offsetHeight || 0;\n            size.width = element.offsetWidth || 0;\n            size.top = element.offsetTop;\n            size.left = element.offsetLeft;\n            size.right = parentWidth - size.width - size.left;\n        }\n        return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */\n    componentDidUpdate() { }\n    render() {\n        return this.props.children;\n    }\n}\nfunction PopChild({ children, isPresent, anchorX, root }) {\n    const id = useId();\n    const ref = useRef(null);\n    const size = useRef({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n        right: 0,\n    });\n    const { nonce } = useContext(MotionConfigContext);\n    /**\n     * We create and inject a style block so we can apply this explicit\n     * sizing in a non-destructive manner by just deleting the style block.\n     *\n     * We can't apply size via render as the measurement happens\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n     * styles directly on the DOM node, we might be overwriting\n     * styles set via the style prop.\n     */\n    useInsertionEffect(() => {\n        const { width, height, top, left, right } = size.current;\n        if (isPresent || !ref.current || !width || !height)\n            return;\n        const x = anchorX === \"left\" ? `left: ${left}` : `right: ${right}`;\n        ref.current.dataset.motionPopId = id;\n        const style = document.createElement(\"style\");\n        if (nonce)\n            style.nonce = nonce;\n        const parent = root ?? document.head;\n        parent.appendChild(style);\n        if (style.sheet) {\n            style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            ${x}px !important;\n            top: ${top}px !important;\n          }\n        `);\n        }\n        return () => {\n            parent.removeChild(style);\n            if (parent.contains(style)) {\n                parent.removeChild(style);\n            }\n        };\n    }, [isPresent]);\n    return (jsx(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size, children: React.cloneElement(children, { ref }) }));\n}\n\nexport { PopChild };\n","\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport * as React from 'react';\nimport { useId, useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PopChild } from './PopChild.mjs';\n\nconst PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, anchorX, root }) => {\n    const presenceChildren = useConstant(newChildrenMap);\n    const id = useId();\n    let isReusedContext = true;\n    let context = useMemo(() => {\n        isReusedContext = false;\n        return {\n            id,\n            initial,\n            isPresent,\n            custom,\n            onExitComplete: (childId) => {\n                presenceChildren.set(childId, true);\n                for (const isComplete of presenceChildren.values()) {\n                    if (!isComplete)\n                        return; // can stop searching when any is incomplete\n                }\n                onExitComplete && onExitComplete();\n            },\n            register: (childId) => {\n                presenceChildren.set(childId, false);\n                return () => presenceChildren.delete(childId);\n            },\n        };\n    }, [isPresent, presenceChildren, onExitComplete]);\n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    if (presenceAffectsLayout && isReusedContext) {\n        context = { ...context };\n    }\n    useMemo(() => {\n        presenceChildren.forEach((_, key) => presenceChildren.set(key, false));\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(() => {\n        !isPresent &&\n            !presenceChildren.size &&\n            onExitComplete &&\n            onExitComplete();\n    }, [isPresent]);\n    if (mode === \"popLayout\") {\n        children = (jsx(PopChild, { isPresent: isPresent, anchorX: anchorX, root: root, children: children }));\n    }\n    return (jsx(PresenceContext.Provider, { value: context, children: children }));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import { useContext, useId, useEffect, useCallback } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence(subscribe = true) {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => {\n        if (subscribe) {\n            return register(id);\n        }\n    }, [subscribe]);\n    const safeToRemove = useCallback(() => subscribe && onExitComplete && onExitComplete(id), [id, onExitComplete, subscribe]);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","import { Children, isValidElement } from 'react';\n\nconst getChildKey = (child) => child.key || \"\";\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, (child) => {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n\nexport { getChildKey, onlyElements };\n","\"use client\";\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { useMemo, useRef, useState, useContext } from 'react';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { usePresence } from './use-presence.mjs';\nimport { onlyElements, getChildKey } from './utils.mjs';\n\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, presenceAffectsLayout = true, mode = \"sync\", propagate = false, anchorX = \"left\", root }) => {\n    const [isParentPresent, safeToRemove] = usePresence(propagate);\n    /**\n     * Filter any children that aren't ReactElements. We can only track components\n     * between renders with a props.key.\n     */\n    const presentChildren = useMemo(() => onlyElements(children), [children]);\n    /**\n     * Track the keys of the currently rendered children. This is used to\n     * determine which children are exiting.\n     */\n    const presentKeys = propagate && !isParentPresent ? [] : presentChildren.map(getChildKey);\n    /**\n     * If `initial={false}` we only want to pass this to components in the first render.\n     */\n    const isInitialRender = useRef(true);\n    /**\n     * A ref containing the currently present children. When all exit animations\n     * are complete, we use this to re-render the component with the latest children\n     * *committed* rather than the latest children *rendered*.\n     */\n    const pendingPresentChildren = useRef(presentChildren);\n    /**\n     * Track which exiting children have finished animating out.\n     */\n    const exitComplete = useConstant(() => new Map());\n    /**\n     * Save children to render as React state. To ensure this component is concurrent-safe,\n     * we check for exiting children via an effect.\n     */\n    const [diffedChildren, setDiffedChildren] = useState(presentChildren);\n    const [renderedChildren, setRenderedChildren] = useState(presentChildren);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        pendingPresentChildren.current = presentChildren;\n        /**\n         * Update complete status of exiting children.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const key = getChildKey(renderedChildren[i]);\n            if (!presentKeys.includes(key)) {\n                if (exitComplete.get(key) !== true) {\n                    exitComplete.set(key, false);\n                }\n            }\n            else {\n                exitComplete.delete(key);\n            }\n        }\n    }, [renderedChildren, presentKeys.length, presentKeys.join(\"-\")]);\n    const exitingChildren = [];\n    if (presentChildren !== diffedChildren) {\n        let nextChildren = [...presentChildren];\n        /**\n         * Loop through all the currently rendered components and decide which\n         * are exiting.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const child = renderedChildren[i];\n            const key = getChildKey(child);\n            if (!presentKeys.includes(key)) {\n                nextChildren.splice(i, 0, child);\n                exitingChildren.push(child);\n            }\n        }\n        /**\n         * If we're in \"wait\" mode, and we have exiting children, we want to\n         * only render these until they've all exited.\n         */\n        if (mode === \"wait\" && exitingChildren.length) {\n            nextChildren = exitingChildren;\n        }\n        setRenderedChildren(onlyElements(nextChildren));\n        setDiffedChildren(presentChildren);\n        /**\n         * Early return to ensure once we've set state with the latest diffed\n         * children, we can immediately re-render.\n         */\n        return null;\n    }\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        renderedChildren.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    /**\n     * If we've been provided a forceRender function by the LayoutGroupContext,\n     * we can use it to force a re-render amongst all surrounding components once\n     * all components have finished animating out.\n     */\n    const { forceRender } = useContext(LayoutGroupContext);\n    return (jsx(Fragment, { children: renderedChildren.map((child) => {\n            const key = getChildKey(child);\n            const isPresent = propagate && !isParentPresent\n                ? false\n                : presentChildren === renderedChildren ||\n                    presentKeys.includes(key);\n            const onExit = () => {\n                if (exitComplete.has(key)) {\n                    exitComplete.set(key, true);\n                }\n                else {\n                    return;\n                }\n                let isEveryExitComplete = true;\n                exitComplete.forEach((isExitComplete) => {\n                    if (!isExitComplete)\n                        isEveryExitComplete = false;\n                });\n                if (isEveryExitComplete) {\n                    forceRender?.();\n                    setRenderedChildren(pendingPresentChildren.current);\n                    propagate && safeToRemove?.();\n                    onExitComplete && onExitComplete();\n                }\n            };\n            return (jsx(PresenceChild, { isPresent: isPresent, initial: !isInitialRender.current || initial\n                    ? undefined\n                    : false, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode, root: root, onExitComplete: isPresent ? undefined : onExit, anchorX: anchorX, children: child }, key));\n        }) }));\n};\n\nexport { AnimatePresence };\n","\"use client\";\nimport { createContext } from 'react';\n\nconst LazyContext = createContext({ strict: false });\n\nexport { LazyContext };\n","const featureProps = {\n    animation: [\n        \"animate\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"exit\",\n        \"whileInView\",\n        \"whileFocus\",\n        \"whileDrag\",\n    ],\n    exit: [\"exit\"],\n    drag: [\"drag\", \"dragControls\"],\n    focus: [\"whileFocus\"],\n    hover: [\"whileHover\", \"onHoverStart\", \"onHoverEnd\"],\n    tap: [\"whileTap\", \"onTap\", \"onTapStart\", \"onTapCancel\"],\n    pan: [\"onPan\", \"onPanStart\", \"onPanSessionStart\", \"onPanEnd\"],\n    inView: [\"whileInView\", \"onViewportEnter\", \"onViewportLeave\"],\n    layout: [\"layout\", \"layoutId\"],\n};\nconst featureDefinitions = {};\nfor (const key in featureProps) {\n    featureDefinitions[key] = {\n        isEnabled: (props) => featureProps[key].some((name) => !!props[name]),\n    };\n}\n\nexport { featureDefinitions };\n","/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nconst validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"custom\",\n    \"inherit\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"globalTapTarget\",\n    \"ignoreStrict\",\n    \"viewport\",\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n    return (key.startsWith(\"while\") ||\n        (key.startsWith(\"drag\") && key !== \"draggable\") ||\n        key.startsWith(\"layout\") ||\n        key.startsWith(\"onTap\") ||\n        key.startsWith(\"onPan\") ||\n        key.startsWith(\"onLayout\") ||\n        validMotionProps.has(key));\n}\n\nexport { isValidMotionProp };\n","import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (typeof isValidProp !== \"function\")\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */\n        if (key === \"values\" && typeof props.values === \"object\")\n            continue;\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] &&\n                key.startsWith(\"onDrag\"))) {\n            filteredProps[key] =\n                props[key];\n        }\n    }\n    return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };\n","import { warnOnce } from 'motion-utils';\n\nfunction createDOMMotionComponentProxy(componentFactory) {\n    if (typeof Proxy === \"undefined\") {\n        return componentFactory;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */\n    const componentCache = new Map();\n    const deprecatedFactoryFunction = (...args) => {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, \"motion() is deprecated. Use motion.create() instead.\");\n        }\n        return componentFactory(...args);\n    };\n    return new Proxy(deprecatedFactoryFunction, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */\n        get: (_target, key) => {\n            if (key === \"create\")\n                return componentFactory;\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */\n            if (!componentCache.has(key)) {\n                componentCache.set(key, componentFactory(key));\n            }\n            return componentCache.get(key);\n        },\n    });\n}\n\nexport { createDOMMotionComponentProxy };\n","\"use client\";\nimport { createContext } from 'react';\n\nconst MotionContext = /* @__PURE__ */ createContext({});\n\nexport { MotionContext };\n","function isAnimationControls(v) {\n    return (v !== null &&\n        typeof v === \"object\" &&\n        typeof v.start === \"function\");\n}\n\nexport { isAnimationControls };\n","/**\n * Decides if the supplied variable is variant label\n */\nfunction isVariantLabel(v) {\n    return typeof v === \"string\" || Array.isArray(v);\n}\n\nexport { isVariantLabel };\n","const variantPriorityOrder = [\n    \"animate\",\n    \"whileInView\",\n    \"whileFocus\",\n    \"whileHover\",\n    \"whileTap\",\n    \"whileDrag\",\n    \"exit\",\n];\nconst variantProps = [\"initial\", ...variantPriorityOrder];\n\nexport { variantPriorityOrder, variantProps };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nfunction isControllingVariants(props) {\n    return (isAnimationControls(props.animate) ||\n        variantProps.some((name) => isVariantLabel(props[name])));\n}\nfunction isVariantNode(props) {\n    return Boolean(isControllingVariants(props) || props.variants);\n}\n\nexport { isControllingVariants, isVariantNode };\n","import { useContext, useMemo } from 'react';\nimport { MotionContext } from './index.mjs';\nimport { getCurrentTreeVariants } from './utils.mjs';\n\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = getCurrentTreeVariants(props, useContext(MotionContext));\n    return useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\nexport { useCreateMotionContext };\n","import { isControllingVariants } from '../../render/utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from '../../render/utils/is-variant-label.mjs';\n\nfunction getCurrentTreeVariants(props, context) {\n    if (isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || isVariantLabel(initial)\n                ? initial\n                : undefined,\n            animate: isVariantLabel(animate) ? animate : undefined,\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\nexport { getCurrentTreeVariants };\n","const motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\nexport { motionComponentSymbol };\n","function isRefObject(ref) {\n    return (ref &&\n        typeof ref === \"object\" &&\n        Object.prototype.hasOwnProperty.call(ref, \"current\"));\n}\n\nexport { isRefObject };\n","import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        if (instance) {\n            visualState.onMount && visualState.onMount(instance);\n        }\n        if (visualElement) {\n            if (instance) {\n                visualElement.mount(instance);\n            }\n            else {\n                visualElement.unmount();\n            }\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n","/**\n * Convert camelCase to dash-case properties.\n */\nconst camelToDash = (str) => str.replace(/([a-z])([A-Z])/gu, \"$1-$2\").toLowerCase();\n\nexport { camelToDash };\n","import { camelToDash } from '../../render/dom/utils/camel-to-dash.mjs';\n\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\n\nexport { optimizedAppearDataAttribute, optimizedAppearDataId };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * Internal, exported only for usage in Framer\n */\nconst SwitchLayoutGroupContext = createContext({});\n\nexport { SwitchLayoutGroupContext };\n","import { microtask } from 'motion-dom';\nimport { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../context/SwitchLayoutGroupContext.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\nfunction useVisualElement(Component, visualState, props, createVisualElement, ProjectionNodeConstructor) {\n    const { visualElement: parent } = useContext(MotionContext);\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef(null);\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    /**\n     * Load Motion gesture and animation features. These are rendered as renderless\n     * components so each feature can optionally make use of React lifecycle methods.\n     */\n    const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n    if (visualElement &&\n        !visualElement.projection &&\n        ProjectionNodeConstructor &&\n        (visualElement.type === \"html\" || visualElement.type === \"svg\")) {\n        createProjectionNode(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig);\n    }\n    const isMounted = useRef(false);\n    useInsertionEffect(() => {\n        /**\n         * Check the component has already mounted before calling\n         * `update` unnecessarily. This ensures we skip the initial update.\n         */\n        if (visualElement && isMounted.current) {\n            visualElement.update(props, presenceContext);\n        }\n    });\n    /**\n     * Cache this value as we want to know whether HandoffAppearAnimations\n     * was present on initial render - it will be deleted after this.\n     */\n    const optimisedAppearId = props[optimizedAppearDataAttribute];\n    const wantsHandoff = useRef(Boolean(optimisedAppearId) &&\n        !window.MotionHandoffIsComplete?.(optimisedAppearId) &&\n        window.MotionHasOptimisedAnimation?.(optimisedAppearId));\n    useIsomorphicLayoutEffect(() => {\n        if (!visualElement)\n            return;\n        isMounted.current = true;\n        window.MotionIsMounted = true;\n        visualElement.updateFeatures();\n        microtask.render(visualElement.render);\n        /**\n         * Ideally this function would always run in a useEffect.\n         *\n         * However, if we have optimised appear animations to handoff from,\n         * it needs to happen synchronously to ensure there's no flash of\n         * incorrect styles in the event of a hydration error.\n         *\n         * So if we detect a situtation where optimised appear animations\n         * are running, we use useLayoutEffect to trigger animations.\n         */\n        if (wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    useEffect(() => {\n        if (!visualElement)\n            return;\n        if (!wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n        if (wantsHandoff.current) {\n            // This ensures all future calls to animateChanges() in this component will run in useEffect\n            queueMicrotask(() => {\n                window.MotionHandoffMarkAsComplete?.(optimisedAppearId);\n            });\n            wantsHandoff.current = false;\n        }\n    });\n    return visualElement;\n}\nfunction createProjectionNode(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig) {\n    const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, layoutCrossfade, } = props;\n    visualElement.projection = new ProjectionNodeConstructor(visualElement.latestValues, props[\"data-framer-portal-id\"]\n        ? undefined\n        : getClosestProjectingNode(visualElement.parent));\n    visualElement.projection.setOptions({\n        layoutId,\n        layout,\n        alwaysMeasureLayout: Boolean(drag) || (dragConstraints && isRefObject(dragConstraints)),\n        visualElement,\n        /**\n         * TODO: Update options in an effect. This could be tricky as it'll be too late\n         * to update by the time layout animations run.\n         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n         * ensuring it gets called if there's no potential layout animations.\n         *\n         */\n        animationType: typeof layout === \"string\" ? layout : \"both\",\n        initialPromotionConfig,\n        crossfade: layoutCrossfade,\n        layoutScroll,\n        layoutRoot,\n    });\n}\nfunction getClosestProjectingNode(visualElement) {\n    if (!visualElement)\n        return undefined;\n    return visualElement.options.allowProjection !== false\n        ? visualElement.projection\n        : getClosestProjectingNode(visualElement.parent);\n}\n\nexport { useVisualElement };\n","\"use client\";\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { warning, invariant } from 'motion-utils';\nimport { forwardRef, useContext } from 'react';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { LazyContext } from '../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { featureDefinitions } from './features/definitions.mjs';\nimport { loadFeatures } from './features/load-features.mjs';\nimport { motionComponentSymbol } from './utils/symbol.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createRendererMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component, }) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */\n        let MeasureLayout;\n        const configAndProps = {\n            ...useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props),\n        };\n        const { isStatic } = configAndProps;\n        const context = useCreateMotionContext(props);\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && isBrowser) {\n            useStrictMode(configAndProps, preloadedFeatures);\n            const layoutProjection = getProjectionFunctionality(configAndProps);\n            MeasureLayout = layoutProjection.MeasureLayout;\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement, layoutProjection.ProjectionNode);\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (jsxs(MotionContext.Provider, { value: context, children: [MeasureLayout && context.visualElement ? (jsx(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null, useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)] }));\n    }\n    MotionComponent.displayName = `motion.${typeof Component === \"string\"\n        ? Component\n        : `create(${Component.displayName ?? Component.name ?? \"\"})`}`;\n    const ForwardRefMotionComponent = forwardRef(MotionComponent);\n    ForwardRefMotionComponent[motionComponentSymbol] = Component;\n    return ForwardRefMotionComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\nfunction useStrictMode(configAndProps, preloadedFeatures) {\n    const isStrict = useContext(LazyContext).strict;\n    /**\n     * If we're in development mode, check to make sure we're not rendering a motion component\n     * as a child of LazyMotion, as this will break the file-size benefits of using it.\n     */\n    if (process.env.NODE_ENV !== \"production\" &&\n        preloadedFeatures &&\n        isStrict) {\n        const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n        configAndProps.ignoreStrict\n            ? warning(false, strictMessage)\n            : invariant(false, strictMessage);\n    }\n}\nfunction getProjectionFunctionality(props) {\n    const { drag, layout } = featureDefinitions;\n    if (!drag && !layout)\n        return {};\n    const combined = { ...drag, ...layout };\n    return {\n        MeasureLayout: drag?.isEnabled(props) || layout?.isEnabled(props)\n            ? combined.MeasureLayout\n            : undefined,\n        ProjectionNode: combined.ProjectionNode,\n    };\n}\n\nexport { createRendererMotionComponent };\n","import { featureDefinitions } from './definitions.mjs';\n\nfunction loadFeatures(features) {\n    for (const key in features) {\n        featureDefinitions[key] = {\n            ...featureDefinitions[key],\n            ...features[key],\n        };\n    }\n}\n\nexport { loadFeatures };\n","import { isCSSVariableName } from 'motion-dom';\n\nconst scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    for (const key in correctors) {\n        scaleCorrectors[key] = correctors[key];\n        if (isCSSVariableName(key)) {\n            scaleCorrectors[key].isCSSVariable = true;\n        }\n    }\n}\n\nexport { addScaleCorrector, scaleCorrectors };\n","import { transformProps } from 'motion-dom';\nimport { scaleCorrectors } from '../../projection/styles/scale-correction.mjs';\n\nfunction isForcedMotionValue(key, { layout, layoutId }) {\n    return (transformProps.has(key) ||\n        key.startsWith(\"origin\") ||\n        ((layout || layoutId !== undefined) &&\n            (!!scaleCorrectors[key] || key === \"opacity\")));\n}\n\nexport { isForcedMotionValue };\n","import { transformPropOrder, getValueAsType, numberValueTypes } from 'motion-dom';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(latestValues, transform, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    let transformIsDefault = true;\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        const value = latestValues[key];\n        if (value === undefined)\n            continue;\n        let valueIsDefault = true;\n        if (typeof value === \"number\") {\n            valueIsDefault = value === (key.startsWith(\"scale\") ? 1 : 0);\n        }\n        else {\n            valueIsDefault = parseFloat(value) === 0;\n        }\n        if (!valueIsDefault || transformTemplate) {\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (!valueIsDefault) {\n                transformIsDefault = false;\n                const transformName = translateAlias[key] || key;\n                transformString += `${transformName}(${valueAsType}) `;\n            }\n            if (transformTemplate) {\n                transform[key] = valueAsType;\n            }\n        }\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n","import { transformProps, isCSSVariableName, getValueAsType, numberValueTypes } from 'motion-dom';\nimport { buildTransform } from './build-transform.mjs';\n\nfunction buildHTMLStyles(state, latestValues, transformTemplate) {\n    const { style, vars, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept separately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            continue;\n        }\n        else if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        else {\n            // Convert the value to its default value type, ie 0 -> \"0px\"\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (key.startsWith(\"origin\")) {\n                // If this is a transform origin, flag and enable further transform-origin processing\n                hasTransformOrigin = true;\n                transformOrigin[key] =\n                    valueAsType;\n            }\n            else {\n                style[key] = valueAsType;\n            }\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(latestValues, state.transform, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n","const createHtmlRenderState = () => ({\n    style: {},\n    transform: {},\n    transformOrigin: {},\n    vars: {},\n});\n\nexport { createHtmlRenderState };\n","import { isMotionValue } from 'motion-dom';\nimport { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState));\n    return style;\n}\nfunction useHTMLProps(props, visualState) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n","import { px } from 'motion-dom';\n\nconst dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\",\n};\nconst camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\",\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\nfunction buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    const keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = px.transform(-offset);\n    // Build the dash array\n    const pathLength = px.transform(length);\n    const pathSpacing = px.transform(spacing);\n    attrs[keys.array] = `${pathLength} ${pathSpacing}`;\n}\n\nexport { buildSVGPath };\n","import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attributes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, attrScale, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, isSVGTag, transformTemplate, styleProp) {\n    buildHTMLStyles(state, latest, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */\n    if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style } = state;\n    /**\n     * However, we apply transforms as CSS transforms.\n     * So if we detect a transform, transformOrigin we take it from attrs and copy it into style.\n     */\n    if (attrs.transform) {\n        style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    if (style.transform || attrs.transformOrigin) {\n        style.transformOrigin = attrs.transformOrigin ?? \"50% 50%\";\n        delete attrs.transformOrigin;\n    }\n    if (style.transform) {\n        /**\n         * SVG's element transform-origin uses its own median as a reference.\n         * Therefore, transformBox becomes a fill-box\n         */\n        style.transformBox = styleProp?.transformBox ?? \"fill-box\";\n        delete attrs.transformBox;\n    }\n    // Render attrX/attrY/attrScale as attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    if (attrScale !== undefined)\n        attrs.scale = attrScale;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n","import { createHtmlRenderState } from '../../html/utils/create-render-state.mjs';\n\nconst createSvgRenderState = () => ({\n    ...createHtmlRenderState(),\n    attrs: {},\n});\n\nexport { createSvgRenderState };\n","const isSVGTag = (tag) => typeof tag === \"string\" && tag.toLowerCase() === \"svg\";\n\nexport { isSVGTag };\n","import { useMemo } from 'react';\nimport { copyRawValuesOnly } from '../html/use-props.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = useMemo(() => {\n        const state = createSvgRenderState();\n        buildSVGAttrs(state, visualState, isSVGTag(Component), props.transformTemplate, props.style);\n        return {\n            ...state.attrs,\n            style: { ...state.style },\n        };\n    }, [visualState]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = { ...rawStyles, ...visualProps.style };\n    }\n    return visualProps;\n}\n\nexport { useSVGProps };\n","/**\n * We keep these listed separately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */\nconst lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n];\n\nexport { lowercaseSVGElements };\n","import { lowercaseSVGElements } from '../../svg/lowercase-elements.mjs';\n\nfunction isSVGComponent(Component) {\n    if (\n    /**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */\n    typeof Component !== \"string\" ||\n        /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */\n        Component.includes(\"-\")) {\n        return false;\n    }\n    else if (\n    /**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */\n    lowercaseSVGElements.indexOf(Component) > -1 ||\n        /**\n         * If it contains a capital letter, it's an SVG component\n         */\n        /[A-Z]/u.test(Component)) {\n        return true;\n    }\n    return false;\n}\n\nexport { isSVGComponent };\n","import { isMotionValue } from 'motion-dom';\nimport { Fragment, useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nfunction createUseRender(forwardMotionProps = false) {\n    const useRender = (Component, props, ref, { latestValues }, isStatic) => {\n        const useVisualProps = isSVGComponent(Component)\n            ? useSVGProps\n            : useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = Component !== Fragment\n            ? { ...filteredProps, ...visualProps, ref }\n            : {};\n        /**\n         * If component has been handed a motion value as its child,\n         * memoise its initial value and render that. Subsequent updates\n         * will be handled by the onChange handler\n         */\n        const { children } = props;\n        const renderedChildren = useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);\n        return createElement(Component, {\n            ...elementProps,\n            children: renderedChildren,\n        });\n    };\n    return useRender;\n}\n\nexport { createUseRender };\n","function getValueState(visualElement) {\n    const state = [{}, {}];\n    visualElement?.values.forEach((value, key) => {\n        state[0][key] = value.get();\n        state[1][key] = value.getVelocity();\n    });\n    return state;\n}\nfunction resolveVariantFromProps(props, definition, custom, visualElement) {\n    /**\n     * If the variant definition is a function, resolve.\n     */\n    if (typeof definition === \"function\") {\n        const [current, velocity] = getValueState(visualElement);\n        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */\n    if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */\n    if (typeof definition === \"function\") {\n        const [current, velocity] = getValueState(visualElement);\n        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n    }\n    return definition;\n}\n\nexport { resolveVariantFromProps };\n","import { isMotionValue } from 'motion-dom';\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n    return isMotionValue(value) ? value.get() : value;\n}\n\nexport { resolveMotionValue };\n","import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        for (let i = 0; i < list.length; i++) {\n            const resolved = resolveVariantFromProps(props, list[i]);\n            if (resolved) {\n                const { transitionEnd, transition, ...target } = resolved;\n                for (const key in target) {\n                    let valueTarget = target[key];\n                    if (Array.isArray(valueTarget)) {\n                        /**\n                         * Take final keyframe if the initial animation is blocked because\n                         * we want to initialise at the end of that blocked animation.\n                         */\n                        const index = isInitialAnimationBlocked\n                            ? valueTarget.length - 1\n                            : 0;\n                        valueTarget = valueTarget[index];\n                    }\n                    if (valueTarget !== null) {\n                        values[key] = valueTarget;\n                    }\n                }\n                for (const key in transitionEnd) {\n                    values[key] = transitionEnd[key];\n                }\n            }\n        }\n    }\n    return values;\n}\n\nexport { makeUseVisualState };\n","import { isMotionValue } from 'motion-dom';\nimport { isForcedMotionValue } from '../../../motion/utils/is-forced-motion-value.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    const { style } = props;\n    const newValues = {};\n    for (const key in style) {\n        if (isMotionValue(style[key]) ||\n            (prevProps.style &&\n                isMotionValue(prevProps.style[key])) ||\n            isForcedMotionValue(key, props) ||\n            visualElement?.getValue(key)?.liveStyle !== undefined) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nconst htmlMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps,\n        createRenderState: createHtmlRenderState,\n    }),\n};\n\nexport { htmlMotionConfig };\n","import { isMotionValue, transformPropOrder } from 'motion-dom';\nimport { scrapeMotionValuesFromProps as scrapeMotionValuesFromProps$1 } from '../../html/utils/scrape-motion-values.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    const newValues = scrapeMotionValuesFromProps$1(props, prevProps, visualElement);\n    for (const key in props) {\n        if (isMotionValue(props[key]) ||\n            isMotionValue(prevProps[key])) {\n            const targetKey = transformPropOrder.indexOf(key) !== -1\n                ? \"attr\" + key.charAt(0).toUpperCase() + key.substring(1)\n                : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n    }),\n};\n\nexport { svgMotionConfig };\n","import { createRendererMotionComponent } from '../../motion/index.mjs';\nimport { createUseRender } from '../dom/use-render.mjs';\nimport { isSVGComponent } from '../dom/utils/is-svg-component.mjs';\nimport { htmlMotionConfig } from '../html/config-motion.mjs';\nimport { svgMotionConfig } from '../svg/config-motion.mjs';\n\nfunction createMotionComponentFactory(preloadedFeatures, createVisualElement) {\n    return function createMotionComponent(Component, { forwardMotionProps } = { forwardMotionProps: false }) {\n        const baseConfig = isSVGComponent(Component)\n            ? svgMotionConfig\n            : htmlMotionConfig;\n        const config = {\n            ...baseConfig,\n            preloadedFeatures,\n            useRender: createUseRender(forwardMotionProps),\n            createVisualElement,\n            Component,\n        };\n        return createRendererMotionComponent(config);\n    };\n}\n\nexport { createMotionComponentFactory };\n","import { resolveVariantFromProps } from './resolve-variants.mjs';\n\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, visualElement);\n}\n\nexport { resolveVariant };\n","const isKeyframesTarget = (v) => {\n    return Array.isArray(v);\n};\n\nexport { isKeyframesTarget };\n","import { motionValue } from 'motion-dom';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction resolveFinalValueInKeyframes(v) {\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved || {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\n\nexport { setTarget };\n","import { MotionGlobalConfig } from 'motion-utils';\nimport { isWillChangeMotionValue } from './is.mjs';\n\nfunction addValueToWillChange(visualElement, key) {\n    const willChange = visualElement.getValue(\"willChange\");\n    /**\n     * It could be that a user has set willChange to a regular MotionValue,\n     * in which case we can't add the value to it.\n     */\n    if (isWillChangeMotionValue(willChange)) {\n        return willChange.add(key);\n    }\n    else if (!willChange && MotionGlobalConfig.WillChange) {\n        const newWillChange = new MotionGlobalConfig.WillChange(\"auto\");\n        visualElement.addValue(\"willChange\", newWillChange);\n        newWillChange.add(key);\n    }\n}\n\nexport { addValueToWillChange };\n","import { isMotionValue } from 'motion-dom';\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nexport { isWillChangeMotionValue };\n","import { optimizedAppearDataAttribute } from './data-id.mjs';\n\nfunction getOptimisedAppearId(visualElement) {\n    return visualElement.props[optimizedAppearDataAttribute];\n}\n\nexport { getOptimisedAppearId };\n","const isNotNull = (value) => value !== null;\nfunction getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }, finalKeyframe) {\n    const resolvedKeyframes = keyframes.filter(isNotNull);\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1\n        ? 0\n        : resolvedKeyframes.length - 1;\n    return !index || finalKeyframe === undefined\n        ? resolvedKeyframes[index]\n        : finalKeyframe;\n}\n\nexport { getFinalKeyframe };\n","import { transformProps } from 'motion-dom';\n\nconst underDampedSpring = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n};\nconst criticallyDampedSpring = (target) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8,\n};\n/**\n * Default easing curve is a slightly shallower version of\n * the default browser easing curve.\n */\nconst ease = {\n    type: \"keyframes\",\n    ease: [0.25, 0.1, 0.35, 1],\n    duration: 0.3,\n};\nconst getDefaultTransition = (valueKey, { keyframes }) => {\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    }\n    else if (transformProps.has(valueKey)) {\n        return valueKey.startsWith(\"scale\")\n            ? criticallyDampedSpring(keyframes[1])\n            : underDampedSpring;\n    }\n    return ease;\n};\n\nexport { getDefaultTransition };\n","import { getValueTransition, frame, JSAnimation, AsyncMotionValueAnimation } from 'motion-dom';\nimport { secondsToMilliseconds, MotionGlobalConfig } from 'motion-utils';\nimport { getFinalKeyframe } from '../animators/waapi/utils/get-final-keyframe.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { isTransitionDefined } from '../utils/is-transition-defined.mjs';\n\nconst animateMotionValue = (name, value, target, transition = {}, element, isHandoff) => (onComplete) => {\n    const valueTransition = getValueTransition(transition, name) || {};\n    /**\n     * Most transition values are currently completely overwritten by value-specific\n     * transitions. In the future it'd be nicer to blend these transitions. But for now\n     * delay actually does inherit from the root transition if not value-specific.\n     */\n    const delay = valueTransition.delay || transition.delay || 0;\n    /**\n     * Elapsed isn't a public transition option but can be passed through from\n     * optimized appear effects in milliseconds.\n     */\n    let { elapsed = 0 } = transition;\n    elapsed = elapsed - secondsToMilliseconds(delay);\n    const options = {\n        keyframes: Array.isArray(target) ? target : [null, target],\n        ease: \"easeOut\",\n        velocity: value.getVelocity(),\n        ...valueTransition,\n        delay: -elapsed,\n        onUpdate: (v) => {\n            value.set(v);\n            valueTransition.onUpdate && valueTransition.onUpdate(v);\n        },\n        onComplete: () => {\n            onComplete();\n            valueTransition.onComplete && valueTransition.onComplete();\n        },\n        name,\n        motionValue: value,\n        element: isHandoff ? undefined : element,\n    };\n    /**\n     * If there's no transition defined for this value, we can generate\n     * unique transition settings for this value.\n     */\n    if (!isTransitionDefined(valueTransition)) {\n        Object.assign(options, getDefaultTransition(name, options));\n    }\n    /**\n     * Both WAAPI and our internal animation functions use durations\n     * as defined by milliseconds, while our external API defines them\n     * as seconds.\n     */\n    options.duration && (options.duration = secondsToMilliseconds(options.duration));\n    options.repeatDelay && (options.repeatDelay = secondsToMilliseconds(options.repeatDelay));\n    /**\n     * Support deprecated way to set initial value. Prefer keyframe syntax.\n     */\n    if (options.from !== undefined) {\n        options.keyframes[0] = options.from;\n    }\n    let shouldSkip = false;\n    if (options.type === false ||\n        (options.duration === 0 && !options.repeatDelay)) {\n        options.duration = 0;\n        if (options.delay === 0) {\n            shouldSkip = true;\n        }\n    }\n    if (MotionGlobalConfig.instantAnimations ||\n        MotionGlobalConfig.skipAnimations) {\n        shouldSkip = true;\n        options.duration = 0;\n        options.delay = 0;\n    }\n    /**\n     * If the transition type or easing has been explicitly set by the user\n     * then we don't want to allow flattening the animation.\n     */\n    options.allowFlatten = !valueTransition.type && !valueTransition.ease;\n    /**\n     * If we can or must skip creating the animation, and apply only\n     * the final keyframe, do so. We also check once keyframes are resolved but\n     * this early check prevents the need to create an animation at all.\n     */\n    if (shouldSkip && !isHandoff && value.get() !== undefined) {\n        const finalKeyframe = getFinalKeyframe(options.keyframes, valueTransition);\n        if (finalKeyframe !== undefined) {\n            frame.update(() => {\n                options.onUpdate(finalKeyframe);\n                options.onComplete();\n            });\n            return;\n        }\n    }\n    return valueTransition.isSync\n        ? new JSAnimation(options)\n        : new AsyncMotionValueAnimation(options);\n};\n\nexport { animateMotionValue };\n","/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\n\nexport { isTransitionDefined };\n","import { getValueTransition, frame, positionalKeys } from 'motion-dom';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { getOptimisedAppearId } from '../optimized-appear/get-appear-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, targetAndTransition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key, visualElement.latestValues[key] ?? null);\n        const valueTarget = target[key];\n        if (valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If the value is already at the defined target, skip the animation.\n         */\n        const currentValue = value.get();\n        if (currentValue !== undefined &&\n            !value.isAnimating &&\n            !Array.isArray(valueTarget) &&\n            valueTarget === currentValue &&\n            !valueTransition.velocity) {\n            continue;\n        }\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        let isHandoff = false;\n        if (window.MotionHandoffAnimation) {\n            const appearId = getOptimisedAppearId(visualElement);\n            if (appearId) {\n                const startTime = window.MotionHandoffAnimation(appearId, key, frame);\n                if (startTime !== null) {\n                    valueTransition.startTime = startTime;\n                    isHandoff = true;\n                }\n            }\n        }\n        addValueToWillChange(visualElement, key);\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && positionalKeys.has(key)\n            ? { type: false }\n            : valueTransition, visualElement, isHandoff));\n        const animation = value.animation;\n        if (animation) {\n            animations.push(animation);\n        }\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            frame.update(() => {\n                transitionEnd && setTarget(visualElement, transitionEnd);\n            });\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\n\nfunction animateVariant(visualElement, variant, options = {}) {\n    const resolved = resolveVariant(visualElement, variant, options.type === \"exit\"\n        ? visualElement.presenceContext?.custom\n        : undefined);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => Promise.all(animateTarget(visualElement, resolved, options))\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, forwardDelay, delayChildren, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(() => last());\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\nfunction animateChildren(visualElement, variant, delay = 0, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const numChildren = visualElement.variantChildren.size;\n    const maxStaggerDuration = (numChildren - 1) * staggerChildren;\n    const delayIsFunction = typeof delayChildren === \"function\";\n    const generateStaggerDuration = delayIsFunction\n        ? (i) => delayChildren(i, numChildren)\n        : // Support deprecated staggerChildren\n            staggerDirection === 1\n                ? (i = 0) => i * staggerChildren\n                : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delay +\n                (delayIsFunction ? 0 : delayChildren) +\n                generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n\nexport { animateVariant, sortByTreeOrder };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","import { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nconst numVariantProps = variantProps.length;\nfunction getVariantContext(visualElement) {\n    if (!visualElement)\n        return undefined;\n    if (!visualElement.isControllingVariants) {\n        const context = visualElement.parent\n            ? getVariantContext(visualElement.parent) || {}\n            : {};\n        if (visualElement.props.initial !== undefined) {\n            context.initial = visualElement.props.initial;\n        }\n        return context;\n    }\n    const context = {};\n    for (let i = 0; i < numVariantProps; i++) {\n        const name = variantProps[i];\n        const prop = visualElement.props[name];\n        if (isVariantLabel(prop) || prop === false) {\n            context[name] = prop;\n        }\n    }\n    return context;\n}\n\nexport { getVariantContext };\n","import { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { getVariantContext } from './get-variant-context.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\n\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    let state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (type) => (acc, definition) => {\n        const resolved = resolveVariant(visualElement, definition, type === \"exit\"\n            ? visualElement.presenceContext?.custom\n            : undefined);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(changedActiveType) {\n        const { props } = visualElement;\n        const context = getVariantContext(visualElement.parent) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined\n                ? props[type]\n                : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] &&\n                prop !== props[type] &&\n                propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            let handledRemovedValues = false;\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues(type), {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                if (removedKeys.has(key)) {\n                    handledRemovedValues = true;\n                    removedKeys.delete(key);\n                }\n                typeState.needsAnimating[key] = true;\n                const motionValue = visualElement.getValue(key);\n                if (motionValue)\n                    motionValue.liveStyle = false;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                let valueHasChanged = false;\n                if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                    valueHasChanged = !shallowCompare(next, prev);\n                }\n                else {\n                    valueHasChanged = next !== prev;\n                }\n                if (valueHasChanged) {\n                    if (next !== undefined && next !== null) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to skip this animation\n             * unless the inherited variants haven't changed on this render.\n             */\n            const willAnimateViaParent = isInherited && variantDidChange;\n            const needsAnimating = !willAnimateViaParent || handledRemovedValues;\n            if (shouldAnimateType && needsAnimating) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            /**\n             * If the initial prop contains a transition we can use that, otherwise\n             * allow the animation function to use the visual element's default.\n             */\n            if (typeof props.initial !== \"boolean\") {\n                const initialTransition = resolveVariant(visualElement, Array.isArray(props.initial)\n                    ? props.initial[0]\n                    : props.initial);\n                if (initialTransition && initialTransition.transition) {\n                    fallbackAnimation.transition = initialTransition.transition;\n                }\n            }\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                const motionValue = visualElement.getValue(key);\n                if (motionValue)\n                    motionValue.liveStyle = true;\n                // @ts-expect-error - @mattgperry to figure if we should do something here\n                fallbackAnimation[key] = fallbackTarget ?? null;\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            (props.initial === false || props.initial === props.animate) &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive) {\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        visualElement.variantChildren?.forEach((child) => child.animationState?.setActive(type, isActive));\n        state[type].isActive = isActive;\n        const animations = animateChanges(type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n        reset: () => {\n            state = createState();\n            isInitialRender = true;\n        },\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\nimport { animateVariant } from './visual-element-variant.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(() => {\n        visualElement.notify(\"AnimationComplete\", definition);\n    });\n}\n\nexport { animateVisualElement };\n","class Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nexport { Feature };\n","import { Feature } from '../Feature.mjs';\n\nlet id = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent);\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => {\n                onExitComplete(this.id);\n            });\n        }\n    }\n    mount() {\n        const { register, onExitComplete } = this.node.presenceContext || {};\n        if (onExitComplete) {\n            onExitComplete(this.id);\n        }\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nexport { ExitAnimationFeature };\n","import { AnimationFeature } from './animation/index.mjs';\nimport { ExitAnimationFeature } from './animation/exit.mjs';\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\nexport { animations };\n","import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        if (isAnimationControls(animate)) {\n            this.unmountControls = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() {\n        this.node.animationState.reset();\n        this.unmountControls?.();\n    }\n}\n\nexport { AnimationFeature };\n","function addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nexport { addDomEvent };\n","import { isPrimaryPointer } from 'motion-dom';\n\nfunction extractEventInfo(event) {\n    return {\n        point: {\n            x: event.pageX,\n            y: event.pageY,\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","import { addDomEvent } from './add-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","import { mixNumber } from 'motion-dom';\n\nconst SCALE_PRECISION = 0.0001;\nconst SCALE_MIN = 1 - SCALE_PRECISION;\nconst SCALE_MAX = 1 + SCALE_PRECISION;\nconst TRANSLATE_PRECISION = 0.01;\nconst TRANSLATE_MIN = 0 - TRANSLATE_PRECISION;\nconst TRANSLATE_MAX = 0 + TRANSLATE_PRECISION;\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target, maxDistance) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mixNumber(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    delta.translate =\n        mixNumber(target.min, target.max, delta.origin) - delta.originPoint;\n    if ((delta.scale >= SCALE_MIN && delta.scale <= SCALE_MAX) ||\n        isNaN(delta.scale)) {\n        delta.scale = 1.0;\n    }\n    if ((delta.translate >= TRANSLATE_MIN &&\n        delta.translate <= TRANSLATE_MAX) ||\n        isNaN(delta.translate)) {\n        delta.translate = 0.0;\n    }\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY ||\n        values.skewX ||\n        values.skewY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mixNumber } from 'motion-dom';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\nconst TREE_SCALE_SNAP_MIN = 0.999999999999;\nconst TREE_SCALE_SNAP_MAX = 1.0000000000001;\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const { visualElement } = node.options;\n        if (visualElement &&\n            visualElement.props.style &&\n            visualElement.props.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    if (treeScale.x < TREE_SCALE_SNAP_MAX &&\n        treeScale.x > TREE_SCALE_SNAP_MIN) {\n        treeScale.x = 1.0;\n    }\n    if (treeScale.y < TREE_SCALE_SNAP_MAX &&\n        treeScale.y > TREE_SCALE_SNAP_MIN) {\n        treeScale.y = 1.0;\n    }\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, axisTranslate, axisScale, boxScale, axisOrigin = 0.5) {\n    const originPoint = mixNumber(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, axisTranslate, axisScale, originPoint, boxScale);\n}\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform.x, transform.scaleX, transform.scale, transform.originX);\n    transformAxis(box.y, transform.y, transform.scaleY, transform.scale, transform.originY);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","// Fixes https://github.com/motiondivision/motion/issues/2270\nconst getContextWindow = ({ current }) => {\n    return current ? current.ownerDocument.defaultView : null;\n};\n\nexport { getContextWindow };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { frame, isPrimaryPointer, cancelFrame, frameData } from 'motion-dom';\nimport { pipe, secondsToMilliseconds, millisecondsToSeconds } from 'motion-utils';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint, contextWindow = window, dragSnapToOrigin = false, distanceThreshold = 3, } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        /**\n         * @internal\n         */\n        this.contextWindow = window;\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursor.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= this.distanceThreshold;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;\n            if (this.dragSnapToOrigin)\n                resumeAnimation && resumeAnimation();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.dragSnapToOrigin = dragSnapToOrigin;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        this.distanceThreshold = distanceThreshold;\n        this.contextWindow = contextWindow || window;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(this.contextWindow, \"pointermove\", this.handlePointerMove), addPointerEvent(this.contextWindow, \"pointerup\", this.handlePointerUp), addPointerEvent(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","import { mixNumber } from 'motion-dom';\nimport { progress, clamp } from 'motion-utils';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(min, point, elastic.min)\n            : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(max, point, elastic.max)\n            : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","import { frame, mixNumber, setDragLock, percent } from 'motion-dom';\nimport { invariant } from 'motion-utils';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\n\nconst elementDragControls = new WeakMap();\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        this.openDragLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        /**\n         * The latest pointer event. Used as fallback when the `cancel` and `stop` functions are called without arguments.\n         */\n        this.latestPointerEvent = null;\n        /**\n         * The latest pan info. Used as fallback when the `cancel` and `stop` functions are called without arguments.\n         */\n        this.latestPanInfo = null;\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false, distanceThreshold } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event).point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openDragLock)\n                    this.openDragLock();\n                this.openDragLock = setDragLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openDragLock)\n                    return;\n            }\n            this.latestPointerEvent = event;\n            this.latestPanInfo = info;\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.postRender(() => onDragStart(event, info));\n            }\n            addValueToWillChange(this.visualElement, \"transform\");\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            this.latestPointerEvent = event;\n            this.latestPanInfo = info;\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openDragLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => {\n            this.latestPointerEvent = event;\n            this.latestPanInfo = info;\n            this.stop(event, info);\n            this.latestPointerEvent = null;\n            this.latestPanInfo = null;\n        };\n        const resumeAnimation = () => eachAxis((axis) => this.getAnimationState(axis) === \"paused\" &&\n            this.getAxisMotionValue(axis).animation?.play());\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            distanceThreshold,\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    /**\n     * @internal\n     */\n    stop(event, panInfo) {\n        const finalEvent = event || this.latestPointerEvent;\n        const finalPanInfo = panInfo || this.latestPanInfo;\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging || !finalPanInfo || !finalEvent)\n            return;\n        const { velocity } = finalPanInfo;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.postRender(() => onDragEnd(finalEvent, finalPanInfo));\n        }\n    }\n    /**\n     * @internal\n     */\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openDragLock) {\n            this.openDragLock();\n            this.openDragLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : this.visualElement.projection?.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.constraints !== false &&\n                    this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        addValueToWillChange(this.visualElement, axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).animation?.pause());\n    }\n    getAnimationState(axis) {\n        return this.getAxisMotionValue(axis).animation?.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = `_drag${axis.toUpperCase()}`;\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial\n                ? props.initial[axis]\n                : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue && this.constraints !== false) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mixNumber(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints) && dragConstraints.current) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        frame.read(measureDragConstraints);\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { frame } from 'motion-dom';\nimport { noop } from 'motion-utils';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { PanSession } from './PanSession.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.postRender(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n            transformPagePoint: this.node.getTransformPagePoint(),\n            contextWindow: getContextWindow(this.node),\n        });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.postRender(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { px } from 'motion-dom';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { complex, mixNumber } from 'motion-dom';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mixNumber(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n","\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport { frame, microtask } from 'motion-dom';\nimport { useContext, Component } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\n\n/**\n * Track whether we've taken any snapshots yet. If not,\n * we can safely skip notification of didUpdate.\n */\nlet hasTakenAnySnapshot = false;\nclass MeasureLayoutWithContext extends Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            if (hasTakenAnySnapshot) {\n                projection.root.didUpdate();\n            }\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const { projection } = visualElement;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        hasTakenAnySnapshot = true;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined ||\n            prevProps.isPresent !== isPresent) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            microtask.postRender(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (jsx(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from 'motion-utils';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { mixNumber, percent, px } from 'motion-dom';\nimport { progress, circOut, noop } from 'motion-utils';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mixNumber(0, lead.opacity ?? 1, easeCrossfadeIn(progress));\n        target.opacityExit = mixNumber(follow.opacity ?? 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mixNumber(follow.opacity ?? 1, lead.opacity ?? 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mixNumber(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mixNumber(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = /*@__PURE__*/ compress(0, 0.5, circOut);\nconst easeCrossfadeOut = /*@__PURE__*/ compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n/**\n * Reset a delta to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisDeltaInto(delta, originDelta) {\n    delta.translate = originDelta.translate;\n    delta.scale = originDelta.scale;\n    delta.originPoint = originDelta.originPoint;\n    delta.origin = originDelta.origin;\n}\n\nexport { copyAxisDeltaInto, copyAxisInto, copyBoxInto };\n","import { percent, mixNumber } from 'motion-dom';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mixNumber(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mixNumber(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction axisEquals(a, b) {\n    return a.min === b.min && a.max === b.max;\n}\nfunction boxEquals(a, b) {\n    return axisEquals(a.x, b.x) && axisEquals(a.y, b.y);\n}\nfunction axisEqualsRounded(a, b) {\n    return (Math.round(a.min) === Math.round(b.min) &&\n        Math.round(a.max) === Math.round(b.max));\n}\nfunction boxEqualsRounded(a, b) {\n    return axisEqualsRounded(a.x, b.x) && axisEqualsRounded(a.y, b.y);\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\nfunction axisDeltaEquals(a, b) {\n    return (a.translate === b.translate &&\n        a.scale === b.scale &&\n        a.originPoint === b.originPoint);\n}\n\nexport { aspectRatio, axisDeltaEquals, axisEquals, axisEqualsRounded, boxEquals, boxEqualsRounded, isDeltaZero };\n","import { addUniqueItem, removeItem } from 'motion-utils';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","import { statsBuffer, isSVGElement, isSVGSVGElement, frame, getValueTransition, cancelFrame, time, frameData, frameSteps, microtask, activeAnimations, motionValue, mixNumber } from 'motion-dom';\nimport { SubscriptionManager, clamp, noop } from 'motion-utils';\nimport { animateSingleValue } from '../../animation/animate/single-value.mjs';\nimport { getOptimisedAppearId } from '../../animation/optimized-appear/get-appear-id.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto, copyAxisDeltaInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcLength, calcRelativePosition, calcRelativeBox, calcBoxDelta, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { boxEqualsRounded, isDeltaZero, axisDeltaEquals, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { globalProjectionState } from './state.mjs';\n\nconst metrics = {\n    nodes: 0,\n    calculatedTargetDeltas: 0,\n    calculatedProjections: 0,\n};\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n    const { latestValues } = visualElement;\n    // Record the distorting transform and then temporarily set it to 0\n    if (latestValues[key]) {\n        values[key] = latestValues[key];\n        visualElement.setStaticValue(key, 0);\n        if (sharedAnimationValues) {\n            sharedAnimationValues[key] = 0;\n        }\n    }\n}\nfunction cancelTreeOptimisedTransformAnimations(projectionNode) {\n    projectionNode.hasCheckedOptimisedAppear = true;\n    if (projectionNode.root === projectionNode)\n        return;\n    const { visualElement } = projectionNode.options;\n    if (!visualElement)\n        return;\n    const appearId = getOptimisedAppearId(visualElement);\n    if (window.MotionHasOptimisedAnimation(appearId, \"transform\")) {\n        const { layout, layoutId } = projectionNode.options;\n        window.MotionCancelOptimisedAnimation(appearId, \"transform\", frame, !(layout || layoutId));\n    }\n    const { parent } = projectionNode;\n    if (parent && !parent.hasCheckedOptimisedAppear) {\n        cancelTreeOptimisedTransformAnimations(parent);\n    }\n}\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent?.()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            this.animationCommitId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * Store whether this node has been checked for optimised appear animations. As\n             * effects fire bottom-up, and we want to look up the tree for appear animations,\n             * this makes sure we only check each path once, stopping at nodes that\n             * have already been checked.\n             */\n            this.hasCheckedOptimisedAppear = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.scheduleUpdate = () => this.update();\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                if (statsBuffer.value) {\n                    metrics.nodes =\n                        metrics.calculatedTargetDeltas =\n                            metrics.calculatedProjections =\n                                0;\n                }\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                if (statsBuffer.addProjectionMetrics) {\n                    statsBuffer.addProjectionMetrics(metrics);\n                }\n            };\n            /**\n             * Frame calculations\n             */\n            this.resolvedRelativeTargetAt = 0.0;\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance) && !isSVGSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (this.root.hasTreeAnimated && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                let innerWidth = 0;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                // Set initial innerWidth in a frame.read callback to batch the read\n                frame.read(() => {\n                    innerWidth = window.innerWidth;\n                });\n                attachResizeListener(instance, () => {\n                    const newInnerWidth = window.innerWidth;\n                    if (newInnerWidth === innerWidth)\n                        return;\n                    innerWidth = newInnerWidth;\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeLayoutChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const hasTargetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout);\n                    /*\n                     * Note: Disabled to fix relative animations always triggering new\n                     * layout animations. If this causes further issues, we can try\n                     * a different approach to detecting relative target changes.\n                     */\n                    // || hasRelativeLayoutChanged\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeLayoutChanged;\n                    if (this.options.layoutRoot ||\n                        this.resumeFrom ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (hasTargetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                        /**\n                         * Set animation origin after starting animation to avoid layout jump\n                         * caused by stopping previous layout animation\n                         */\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            this.eventHandlers.clear();\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetSkewAndRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            /**\n             * If we're running optimised appear animations then these must be\n             * cancelled before measuring the DOM. This is so we can measure\n             * the true layout of the element rather than the WAAPI animation\n             * which will be unaffected by the resetSkewAndRotate step.\n             *\n             * Note: This is a DOM write. Worst case scenario is this is sandwiched\n             * between other snapshot reads which will cause unnecessary style recalculations.\n             * This has to happen here though, as we don't yet know which nodes will need\n             * snapshots in startUpdate(), but we only want to cancel optimised animations\n             * if a layout animation measurement is actually going to be affected by them.\n             */\n            if (window.MotionCancelOptimisedAnimation &&\n                !this.hasCheckedOptimisedAppear) {\n                cancelTreeOptimisedTransformAnimations(this);\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            /**\n             * If this is a repeat of didUpdate then ignore the animation.\n             */\n            if (this.animationId <= this.animationCommitId) {\n                this.nodes.forEach(clearIsLayoutDirty);\n                return;\n            }\n            this.animationCommitId = this.animationId;\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            else {\n                this.isUpdating = false;\n                /**\n                 * Write\n                 */\n                this.nodes.forEach(resetTransformStyle);\n                /**\n                 * Read ==================\n                 */\n                // Update layout measurements of updated children\n                this.nodes.forEach(updateLayout);\n                /**\n                 * Write\n                 */\n                // Notify listeners that the layout is updated\n                this.nodes.forEach(notifyLayoutUpdate);\n            }\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            frameSteps.update.process(frameData);\n            frameSteps.preRender.process(frameData);\n            frameSteps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(this.scheduleUpdate);\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n            if (this.snapshot &&\n                !calcLength(this.snapshot.measuredBox.x) &&\n                !calcLength(this.snapshot.measuredBox.y)) {\n                this.snapshot = undefined;\n            }\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement && this.instance) {\n                const isRoot = checkIsScrollRoot(this.instance);\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot,\n                    offset: measureScroll(this.instance),\n                    wasRoot: this.scroll ? this.scroll.isRoot : isRoot,\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty ||\n                this.shouldResetTransform ||\n                this.options.alwaysMeasureLayout;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                this.instance &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            const wasInScrollRoot = this.scroll?.wasRoot || this.path.some(checkNodeWasScrollRoot);\n            if (!wasInScrollRoot) {\n                // Remove viewport scroll to give page-relative coordinates\n                const { scroll } = this.root;\n                if (scroll) {\n                    translateAxis(box.x, scroll.offset.x);\n                    translateAxis(box.y, scroll.offset.y);\n                }\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            if (this.scroll?.wasRoot) {\n                return boxWithoutScroll;\n            }\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.wasRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                this.parent?.isProjectionDirty ||\n                this.attemptToResolveRelativeTarget ||\n                this.root.updateBlockedByResize);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            if (statsBuffer.value) {\n                metrics.calculatedTargetDeltas++;\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || this.parent?.isProjectionDirty) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.prevProjectionDelta) {\n                    this.createProjectionDeltas();\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta || !this.prevProjectionDelta) {\n                this.createProjectionDeltas();\n            }\n            else {\n                copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);\n                copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);\n            }\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            if (this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY ||\n                !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) ||\n                !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            if (statsBuffer.value) {\n                metrics.calculatedProjections++;\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.visualElement?.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        createProjectionDeltas() {\n            this.prevProjectionDelta = createDelta();\n            this.projectionDelta = createDelta();\n            this.projectionDeltaWithTransform = createDelta();\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation?.stop();\n            this.resumingFrom?.currentAnimation?.stop();\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                activeAnimations.layout++;\n                this.motionValue || (this.motionValue = motionValue(0));\n                this.currentAnimation = animateSingleValue(this.motionValue, [0, 1000], {\n                    ...options,\n                    velocity: 0,\n                    isSync: true,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onStop: () => {\n                        activeAnimations.layout--;\n                    },\n                    onComplete: () => {\n                        activeAnimations.layout--;\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            const { layoutId } = this.options;\n            return layoutId ? this.getStack()?.lead || this : this;\n        }\n        getPrevLead() {\n            const { layoutId } = this.options;\n            return layoutId ? this.getStack()?.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetSkewAndRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected skew or rotation values, we can early return without a forced render.\n            let hasDistortingTransform = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.z ||\n                latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ ||\n                latestValues.skewX ||\n                latestValues.skewY) {\n                hasDistortingTransform = true;\n            }\n            // If there's no distorting values, we don't need to do any more.\n            if (!hasDistortingTransform)\n                return;\n            const resetValues = {};\n            if (latestValues.z) {\n                resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n            }\n            // Check the skew and rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n            }\n            // Force a render of this element to apply the transform with all skews and rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n                if (this.animationValues) {\n                    this.animationValues[key] = resetValues[key];\n                }\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        applyProjectionStyles(targetStyle, // CSSStyleDeclaration - doesn't allow numbers to be assigned to properties\n        styleProp) {\n            if (!this.instance || this.isSVG)\n                return;\n            if (!this.isVisible) {\n                targetStyle.visibility = \"hidden\";\n                return;\n            }\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                targetStyle.visibility = \"\";\n                targetStyle.opacity = \"\";\n                targetStyle.pointerEvents =\n                    resolveMotionValue(styleProp?.pointerEvents) || \"\";\n                targetStyle.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                if (this.options.layoutId) {\n                    targetStyle.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    targetStyle.pointerEvents =\n                        resolveMotionValue(styleProp?.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    targetStyle.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return;\n            }\n            targetStyle.visibility = \"\";\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            let transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                transform = transformTemplate(valuesToRender, transform);\n            }\n            targetStyle.transform = transform;\n            const { x, y } = this.projectionDelta;\n            targetStyle.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                targetStyle.opacity =\n                    lead === this\n                        ? valuesToRender.opacity ??\n                            this.latestValues.opacity ??\n                            1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                targetStyle.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo, isCSSVariable } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        targetStyle[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    // If this is a CSS variable, set it directly on the instance.\n                    // Replacing this function from creating styles to setting them\n                    // would be a good place to remove per frame object creation\n                    if (isCSSVariable) {\n                        this.options.visualElement.renderState.vars[key] = corrected;\n                    }\n                    else {\n                        targetStyle[key] = corrected;\n                    }\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                targetStyle.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp?.pointerEvents) || \"\"\n                        : \"none\";\n            }\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => node.currentAnimation?.stop());\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    const snapshot = node.resumeFrom?.snapshot || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeLayoutChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeLayoutChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeLayoutChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    if (statsBuffer.value) {\n        metrics.nodes++;\n    }\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetSkewAndRotation(node) {\n    node.resetSkewAndRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\nfunction checkNodeWasScrollRoot(node) {\n    return node !== node.root && node.scroll?.wasRoot;\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","import { time, frame, cancelFrame } from 'motion-dom';\nimport { secondsToMilliseconds } from 'motion-utils';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = time.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.setup(checkElapsed, true);\n    return () => cancelFrame(checkElapsed);\n}\nfunction delayInSeconds(callback, timeout) {\n    return delay(callback, secondsToMilliseconds(timeout));\n}\n\nexport { delay, delayInSeconds };\n","import { isMotionValue, motionValue } from 'motion-dom';\nimport { animateMotionValue } from '../interfaces/motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    const zTranslate = latestTransform?.z || 0;\n    if (xTranslate || yTranslate || zTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, ${zTranslate}px) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { transformPerspective, rotate, rotateX, rotateY, skewX, skewY } = latestTransform;\n        if (transformPerspective)\n            transform = `perspective(${transformPerspective}px) ${transform}`;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n        if (skewX)\n            transform += `skewX(${skewX}deg) `;\n        if (skewY)\n            transform += `skewY(${skewY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","import { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { createProjectionNode } from './create-projection-node.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from 'motion-utils';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { hover, frame } from 'motion-dom';\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nfunction handleHoverEvent(node, event, lifecycle) {\n    const { props } = node;\n    if (node.animationState && props.whileHover) {\n        node.animationState.setActive(\"whileHover\", lifecycle === \"Start\");\n    }\n    const eventName = (\"onHover\" + lifecycle);\n    const callback = props[eventName];\n    if (callback) {\n        frame.postRender(() => callback(event, extractEventInfo(event)));\n    }\n}\nclass HoverGesture extends Feature {\n    mount() {\n        const { current } = this.node;\n        if (!current)\n            return;\n        this.unmount = hover(current, (_element, startEvent) => {\n            handleHoverEvent(this.node, startEvent, \"Start\");\n            return (endEvent) => handleHoverEvent(this.node, endEvent, \"End\");\n        });\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n","import { press, frame } from 'motion-dom';\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nfunction handlePressEvent(node, event, lifecycle) {\n    const { props } = node;\n    if (node.current instanceof HTMLButtonElement && node.current.disabled) {\n        return;\n    }\n    if (node.animationState && props.whileTap) {\n        node.animationState.setActive(\"whileTap\", lifecycle === \"Start\");\n    }\n    const eventName = (\"onTap\" + (lifecycle === \"End\" ? \"\" : lifecycle));\n    const callback = props[eventName];\n    if (callback) {\n        frame.postRender(() => callback(event, extractEventInfo(event)));\n    }\n}\nclass PressGesture extends Feature {\n    mount() {\n        const { current } = this.node;\n        if (!current)\n            return;\n        this.unmount = press(current, (_element, startEvent) => {\n            handlePressEvent(this.node, startEvent, \"Start\");\n            return (endEvent, { success }) => handlePressEvent(this.node, endEvent, success ? \"End\" : \"Cancel\");\n        }, { useGlobalTarget: this.node.props.globalTapTarget });\n    }\n    unmount() { }\n}\n\nexport { PressGesture };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n","import { HoverGesture } from '../../gestures/hover.mjs';\nimport { FocusGesture } from '../../gestures/focus.mjs';\nimport { PressGesture } from '../../gestures/press.mjs';\nimport { InViewFeature } from './viewport/index.mjs';\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nexport { gestureAnimations };\n","import { pipe } from 'motion-utils';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","const visualElementStore = new WeakMap();\n\nexport { visualElementStore };\n","import { KeyframeResolver, time, frame, isMotionValue, cancelFrame, transformProps, motionValue, findValueType, complex, getAnimatableNone } from 'motion-dom';\nimport { warnOnce, isNumericalString, isZeroValueString, SubscriptionManager } from 'motion-utils';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\n\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n        return {};\n    }\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        this.KeyframeResolver = KeyframeResolver;\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.renderScheduledAt = 0.0;\n        this.scheduleRender = () => {\n            const now = time.now();\n            if (this.renderScheduledAt < now) {\n                this.renderScheduledAt = now;\n                frame.render(this.render, false, true);\n            }\n        };\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't necessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.valueSubscriptions.clear();\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature) {\n                feature.unmount();\n                feature.isMounted = false;\n            }\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        if (this.valueSubscriptions.has(key)) {\n            this.valueSubscriptions.get(key)();\n        }\n        const valueIsTransform = transformProps.has(key);\n        if (valueIsTransform && this.onBindTransform) {\n            this.onBindTransform();\n        }\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        let removeSyncCheck;\n        if (window.MotionCheckAppearSync) {\n            removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n        }\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n            if (removeSyncCheck)\n                removeSyncCheck();\n            if (value.owner)\n                value.stop();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    updateFeatures() {\n        let key = \"animation\";\n        for (key in featureDefinitions) {\n            const featureDefinition = featureDefinitions[key];\n            if (!featureDefinition)\n                continue;\n            const { isEnabled, Feature: FeatureConstructor } = featureDefinition;\n            /**\n             * If this feature is enabled but not active, make a new instance.\n             */\n            if (!this.features[key] &&\n                FeatureConstructor &&\n                isEnabled(this.props)) {\n                this.features[key] = new FeatureConstructor(this);\n            }\n            /**\n             * If we have a feature, mount or update it.\n             */\n            if (this.features[key]) {\n                const feature = this.features[key];\n                if (feature.isMounted) {\n                    feature.update();\n                }\n                else {\n                    feature.mount();\n                    feature.isMounted = true;\n                }\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listenerName = (\"on\" + key);\n            const listener = props[listenerName];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        const existingValue = this.values.get(key);\n        if (value !== existingValue) {\n            if (existingValue)\n                this.removeValue(key);\n            this.bindToMotionValue(key, value);\n            this.values.set(key, value);\n            this.latestValues[key] = value.get();\n        }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key, target) {\n        let value = this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : this.getBaseTargetFromProps(this.props, key) ??\n                this.readValueFromInstance(this.current, key, this.options);\n        if (value !== undefined && value !== null) {\n            if (typeof value === \"string\" &&\n                (isNumericalString(value) || isZeroValueString(value))) {\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n                value = parseFloat(value);\n            }\n            else if (!findValueType(value) && complex.test(target)) {\n                value = getAnimatableNone(key, target);\n            }\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n        }\n        return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        const { initial } = this.props;\n        let valueFromInitial;\n        if (typeof initial === \"string\" || typeof initial === \"object\") {\n            const variant = resolveVariantFromProps(this.props, initial, this.presenceContext?.custom);\n            if (variant) {\n                valueFromInitial = variant[key];\n            }\n        }\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addEventListener(\"change\", setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","import { isMotionValue, motionValue } from 'motion-dom';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                if (existingValue.liveStyle === true) {\n                    existingValue.jump(nextValue);\n                }\n                else if (!existingValue.hasAnimated) {\n                    existingValue.set(nextValue);\n                }\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","import { DOMKeyframesResolver, isMotionValue } from 'motion-dom';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    constructor() {\n        super(...arguments);\n        this.KeyframeResolver = DOMKeyframesResolver;\n    }\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style\n            ? props.style[key]\n            : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current) {\n                    this.current.textContent = `${latest}`;\n                }\n            });\n        }\n    }\n}\n\nexport { DOMVisualElement };\n","function renderHTML(element, { style, vars }, styleProp, projection) {\n    const elementStyle = element.style;\n    let key;\n    for (key in style) {\n        // CSSStyleDeclaration has [index: number]: string; in the types, so we use that as key type.\n        elementStyle[key] = style[key];\n    }\n    // Write projection styles directly to element style\n    projection?.applyProjectionStyles(elementStyle, styleProp);\n    for (key in vars) {\n        // Loop over any CSS variables and assign those.\n        // They can only be assigned using `setProperty`.\n        elementStyle.setProperty(key, vars[key]);\n    }\n}\n\nexport { renderHTML };\n","import { transformProps, defaultTransformValue, readTransformValue, isCSSVariableName } from 'motion-dom';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"html\";\n        this.renderInstance = renderHTML;\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            return this.projection?.isProjecting\n                ? defaultTransformValue(key)\n                : readTransformValue(instance, key);\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, props) {\n        buildHTMLStyles(renderState, latestValues, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","/**\n * A set of attribute names that are always read/written as camel case.\n */\nconst camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\",\n]);\n\nexport { camelCaseAttributes };\n","import { transformProps, getDefaultValueType } from 'motion-dom';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"svg\";\n        this.isSVGTag = false;\n        this.measureInstanceViewportBox = createBox;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n    build(renderState, latestValues, props) {\n        buildSVGAttrs(renderState, latestValues, this.isSVGTag, props.transformTemplate, props.style);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { camelToDash } from '../../dom/utils/camel-to-dash.mjs';\nimport { renderHTML } from '../../html/utils/render.mjs';\nimport { camelCaseAttributes } from './camel-case-attrs.mjs';\n\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    renderHTML(element, renderState, undefined, projection);\n    for (const key in renderState.attrs) {\n        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);\n    }\n}\n\nexport { renderSVG };\n","import { Fragment } from 'react';\nimport { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options)\n        : new HTMLVisualElement(options, {\n            allowProjection: Component !== Fragment,\n        });\n};\n\nexport { createDomVisualElement };\n","import { createDOMMotionComponentProxy } from '../create-proxy.mjs';\nimport { createMotionComponent } from './create.mjs';\n\nconst motion = /*@__PURE__*/ createDOMMotionComponentProxy(createMotionComponent);\n\nexport { motion };\n","import { animations } from '../../../motion/features/animations.mjs';\nimport { drag } from '../../../motion/features/drag.mjs';\nimport { gestureAnimations } from '../../../motion/features/gestures.mjs';\nimport { layout } from '../../../motion/features/layout.mjs';\nimport { createMotionComponentFactory } from '../create-factory.mjs';\nimport { createDomVisualElement } from '../../dom/create-visual-element.mjs';\n\nconst createMotionComponent = /*@__PURE__*/ createMotionComponentFactory({\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layout,\n}, createDomVisualElement);\n\nexport { createMotionComponent };\n"],"names":["LayoutGroupContext","createContext","useConstant","init","ref","useRef","current","isBrowser","window","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","PresenceContext","MotionConfigContext","transformPagePoint","p","isStatic","reducedMotion","PopChildMeasure","React.Component","getSnapshotBeforeUpdate","prevProps","element","this","props","childRef","isPresent","parent","offsetParent","parentWidth","isHTMLElement","offsetWidth","size","sizeRef","height","offsetHeight","width","top","offsetTop","left","offsetLeft","right","componentDidUpdate","render","children","PopChild","anchorX","root","id","useId","nonce","useContext","useInsertionEffect","x","dataset","motionPopId","style","document","createElement","head","appendChild","sheet","insertRule","removeChild","contains","jsx","React.cloneElement","PresenceChild","initial","onExitComplete","custom","presenceAffectsLayout","mode","presenceChildren","newChildrenMap","isReusedContext","context","useMemo","childId","set","isComplete","values","register","delete","forEach","_","key","React.useEffect","Provider","value","Map","usePresence","subscribe","safeToRemove","useCallback","getChildKey","child","onlyElements","filtered","Children","isValidElement","push","AnimatePresence","propagate","isParentPresent","presentChildren","presentKeys","map","isInitialRender","pendingPresentChildren","exitComplete","diffedChildren","setDiffedChildren","useState","renderedChildren","setRenderedChildren","i","length","includes","get","join","exitingChildren","nextChildren","splice","forceRender","Fragment","has","isEveryExitComplete","isExitComplete","LazyContext","strict","featureProps","animation","exit","drag","focus","hover","tap","pan","inView","layout","featureDefinitions","isEnabled","some","name","validMotionProps","Set","isValidMotionProp","startsWith","shouldForward","isValidProp","require","default","createDOMMotionComponentProxy","componentFactory","Proxy","componentCache","args","_target","MotionContext","isAnimationControls","v","start","isVariantLabel","Array","isArray","variantPriorityOrder","variantProps","isControllingVariants","animate","isVariantNode","Boolean","variants","useCreateMotionContext","inherit","getCurrentTreeVariants","variantLabelsAsDependency","prop","motionComponentSymbol","Symbol","for","isRefObject","Object","prototype","hasOwnProperty","call","useMotionRef","visualState","visualElement","externalRef","instance","onMount","mount","unmount","camelToDash","str","replace","toLowerCase","optimizedAppearDataAttribute","SwitchLayoutGroupContext","useVisualElement","Component","createVisualElement","ProjectionNodeConstructor","lazyContext","presenceContext","reducedMotionConfig","visualElementRef","renderer","blockInitialAnimation","initialLayoutGroupConfig","projection","type","initialPromotionConfig","layoutId","dragConstraints","layoutScroll","layoutRoot","layoutCrossfade","latestValues","getClosestProjectingNode","setOptions","alwaysMeasureLayout","animationType","crossfade","createProjectionNode","isMounted","update","optimisedAppearId","wantsHandoff","_a","MotionHandoffIsComplete","_b","MotionHasOptimisedAnimation","MotionIsMounted","updateFeatures","microtask","animationState","animateChanges","queueMicrotask","MotionHandoffMarkAsComplete","options","allowProjection","createRendererMotionComponent","preloadedFeatures","useRender","useVisualState","MotionComponent","MeasureLayout","configAndProps","useLayoutId","reactExports","layoutProjection","combined","ProjectionNode","getProjectionFunctionality","jsxs","features","loadFeatures","displayName","ForwardRefMotionComponent","forwardRef","layoutGroupId","scaleCorrectors","isForcedMotionValue","transformProps","translateAlias","y","z","transformPerspective","numTransforms","transformPropOrder","buildHTMLStyles","state","transformTemplate","vars","transformOrigin","hasTransform","hasTransformOrigin","isCSSVariableName","valueAsType","getValueAsType","numberValueTypes","transform","transformString","transformIsDefault","valueIsDefault","parseFloat","trim","buildTransform","originX","originY","originZ","createHtmlRenderState","copyRawValuesOnly","target","source","isMotionValue","useStyle","assign","useInitialMotionValues","useHTMLProps","htmlProps","dragListener","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","tabIndex","onTap","onTapStart","whileTap","dashKeys","offset","array","camelKeys","buildSVGAttrs","attrX","attrY","attrScale","pathLength","pathSpacing","pathOffset","latest","isSVGTag","styleProp","viewBox","attrs","transformBox","scale","spacing","useDashCase","keys","px","buildSVGPath","createSvgRenderState","tag","useSVGProps","_isStatic","visualProps","rawStyles","lowercaseSVGElements","isSVGComponent","indexOf","test","createUseRender","forwardMotionProps","filteredProps","isDom","filterProps","elementProps","getValueState","getVelocity","resolveVariantFromProps","definition","velocity","resolveMotionValue","makeUseVisualState","config","make","scrapeMotionValuesFromProps","createRenderState","makeLatestValues","renderState","makeState","scrapeMotionValues","motionValues","isControllingVariants$1","isVariantNode$1","isInitialAnimationBlocked","variantToSet","list","resolved","transitionEnd","transition","valueTarget","newValues","getValue","liveStyle","htmlMotionConfig","scrapeMotionValuesFromProps$1","charAt","toUpperCase","substring","svgMotionConfig","createMotionComponentFactory","resolveVariant","getProps","isKeyframesTarget","setMotionValue","hasValue","addValue","motionValue","addValueToWillChange","willChange","add","MotionGlobalConfig","WillChange","newWillChange","getOptimisedAppearId","isNotNull","underDampedSpring","stiffness","damping","restSpeed","keyframesTransition","duration","ease","getDefaultTransition","valueKey","keyframes","Math","sqrt","animateMotionValue","isHandoff","onComplete","valueTransition","getValueTransition","delay","elapsed","secondsToMilliseconds","onUpdate","when","_delay","delayChildren","staggerChildren","staggerDirection","repeat","repeatType","repeatDelay","from","isTransitionDefined","shouldSkip","instantAnimations","skipAnimations","allowFlatten","finalKeyframe","resolvedKeyframes","filter","index","getFinalKeyframe","frame","isSync","JSAnimation","AsyncMotionValueAnimation","shouldBlockAnimation","protectedKeys","needsAnimating","shouldBlock","animateTarget","targetAndTransition","transitionOverride","animations","animationTypeState","getState","currentValue","isAnimating","MotionHandoffAnimation","appearId","startTime","shouldReduceMotion","positionalKeys","Promise","all","then","setTarget","animateVariant","variant","getAnimation","resolve","getChildAnimations","variantChildren","forwardDelay","numChildren","maxStaggerDuration","delayIsFunction","generateStaggerDuration","sort","sortByTreeOrder","notify","animateChildren","first","last","a","b","sortNodePosition","shallowCompare","next","prev","prevLength","numVariantProps","getVariantContext","reversePriorityOrder","reverse","numAnimationTypes","animateList","resolvedDefinition","animateVisualElement","createAnimationState","createState","buildResolvedTypeValues","acc","changedActiveType","removedKeys","encounteredKeys","removedVariantIndex","Infinity","typeState","propIsVariant","activeDelta","isActive","isInherited","manuallyAnimateOnMount","prevProp","variantDidChange","checkVariantsDidChange","shouldAnimateType","handledRemovedValues","definitionList","resolvedValues","reduce","prevResolvedValues","allKeys","markToAnimate","valueHasChanged","fallbackAnimation","initialTransition","fallbackTarget","getBaseTarget","shouldAnimate","setActive","setAnimateFunction","makeAnimator","reset","createTypeState","whileInView","whileHover","whileDrag","whileFocus","Feature","constructor","node","super","updateAnimationControlsSubscription","unmountControls","prevAnimate","arguments","prevIsPresent","prevPresenceContext","exitAnimation","addDomEvent","eventName","handler","passive","addEventListener","removeEventListener","extractEventInfo","event","point","pageX","pageY","addPointerEvent","isPrimaryPointer","addPointerInfo","convertBoundingBoxToBox","bottom","min","max","calcLength","axis","calcAxisDelta","delta","origin","originPoint","mixNumber","translate","isNaN","calcBoxDelta","calcRelativeAxis","relative","calcRelativeAxisPosition","calcRelativePosition","createBox","eachAxis","callback","isIdentityScale","hasScale","scaleX","scaleY","has2DTranslate","rotate","rotateX","rotateY","skewX","skewY","is2DTranslate","scalePoint","applyPointDelta","boxScale","applyAxisDelta","applyBoxDelta","box","TREE_SCALE_SNAP_MIN","TREE_SCALE_SNAP_MAX","translateAxis","distance","transformAxis","axisTranslate","axisScale","axisOrigin","measureViewportBox","transformPoint","topLeft","bottomRight","transformBoxPoints","getBoundingClientRect","getContextWindow","ownerDocument","defaultView","abs","PanSession","handlers","contextWindow","dragSnapToOrigin","distanceThreshold","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","info","getPanInfo","history","isPanStarted","isDistancePastThreshold","xDelta","yDelta","distance2D","timestamp","frameData","onStart","onMove","handlePointerMove","handlePointerUp","end","onEnd","onSessionEnd","resumeAnimation","panInfo","initialInfo","onSessionStart","removeListeners","pipe","updateHandlers","cancelFrame","subtractPoint","lastDevicePoint","startDevicePoint","timeDelta","timestampedPoint","lastPoint","time","millisecondsToSeconds","currentVelocity","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","defaultElastic","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","elementDragControls","WeakMap","VisualElementDragControls","openDragLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","latestPointerEvent","latestPanInfo","originEvent","snapToCursor","panSession","pauseAnimation","stopAnimation","dragPropagation","onDragStart","setDragLock","resolveConstraints","isAnimationBlocked","getAxisMotionValue","percent","measuredAxis","layoutBox","postRender","dragDirectionLock","onDirectionLock","onDrag","lockThreshold","direction","getCurrentDirection","updateAxis","stop","getAnimationState","play","getTransformPagePoint","finalEvent","finalPanInfo","cancel","startAnimation","onDragEnd","_point","shouldDrag","axisValue","applyConstraints","measure","prevConstraints","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","relativeConstraints","rebaseAxisConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","rootProjectionNode","viewportBox","scroll","measurePageBox","measuredConstraints","calcViewportConstraints","userConstraints","convertBoxToBoundingBox","dragMomentum","dragTransition","onDragTransitionEnd","momentumAnimations","bounceStiffness","bounceDamping","inertia","timeConstant","restDelta","startAxisValueAnimation","pause","dragKey","externalMotionValue","scalePositionWithinConstraints","boxProgress","sourceLength","targetLength","progress","clamp","calcOrigin","updateScroll","updateLayout","addListeners","stopPointerListener","measureDragConstraints","stopMeasureLayoutListener","read","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","asyncHandler","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","pixelsToPercent","pixels","correctBorderRadius","correct","correctBoxShadow","treeScale","projectionDelta","original","shadow","complex","parse","template","createTransformer","xScale","yScale","averageScale","hasTakenAnySnapshot","MeasureLayoutWithContext","componentDidMount","layoutGroup","switchLayoutGroup","correctors","isCSSVariable","addScaleCorrector","defaultScaleCorrectors","group","didUpdate","layoutDependency","willUpdate","promote","relegate","stack","getStack","members","currentAnimation","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","remove","deregister","borderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow","compareByDepth","depth","FlatTree","isDirty","addUniqueItem","removeItem","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","circOut","easeCrossfadeOut","noop","easing","copyAxisInto","originAxis","copyBoxInto","originBox","copyAxisDeltaInto","originDelta","removePointDelta","removeAxisTransforms","transforms","scaleKey","originKey","sourceAxis","removeAxisDelta","xKeys","yKeys","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","axisEquals","axisEqualsRounded","round","boxEqualsRounded","aspectRatio","axisDeltaEquals","NodeStack","scheduleRender","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","animationValues","isUpdating","isLayoutDirty","hide","exitAnimationComplete","resumingFrom","removeLeadSnapshot","transformAxes","resetDistortingTransform","sharedAnimationValues","setStaticValue","cancelTreeOptimisedTransformAnimations","projectionNode","hasCheckedOptimisedAppear","MotionCancelOptimisedAnimation","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","animationId","animationCommitId","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","hasTreeAnimated","updateScheduled","scheduleUpdate","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","resolvedRelativeTargetAt","hasProjected","isVisible","animationProgress","sharedNodes","path","SubscriptionManager","notifyListeners","subscriptionManager","hasListeners","isSVGElement","isSVGSVGElement","cancelDelay","innerWidth","resizeUnblockUpdate","newInnerWidth","timeout","now","checkElapsed","setup","finishAnimation","registerSharedNode","hasRelativeLayoutChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","hasTargetChanged","targetLayout","hasOnlyRelativeTargetChanged","animationOptions","onPlay","setAnimationOrigin","clear","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetSkewAndRotation","getTransformTemplate","shouldNotifyListeners","prevTransformTemplateValue","updateSnapshot","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","notifyLayoutUpdate","isProcessing","frameSteps","process","preRender","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","measuredBox","prevLayout","layoutCorrected","phase","needsMeasurement","isRoot","wasRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundAxis","checkNodeWasScrollRoot","boxWithoutScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","setTargetDelta","targetDelta","forceRelativeParentToResolveTarget","relativeParent","forceRecalculation","getLead","isShared","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","canSkip","pendingAnimation","prevTreeScaleX","prevTreeScaleY","treePath","isSharedTransition","treeLength","display","applyTreeDeltas","prevProjectionDelta","createProjectionDeltas","notifyAll","projectionDeltaWithTransform","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isOnlyMember","shouldCrossfadeOpacity","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","output","to","mixAxisDelta","mixAxis","follow","opacity","opacityExit","borderLabel","followRadius","leadRadius","mixValues","_c","motionValue$1","animateSingleValue","onStop","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","xLength","yLength","shouldPreserveFollowOpacity","getPrevLead","hasDistortingTransform","rotateZ","resetValues","applyProjectionStyles","targetStyle","visibility","pointerEvents","valuesToRender","latestTransform","xTranslate","yTranslate","zTranslate","elementScaleX","elementScaleY","buildProjectionTransform","corrected","num","resetTree","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","userAgentContains","string","navigator","userAgent","roundPoint","maxDistance","DocumentProjectionNode","documentElement","scrollLeft","body","scrollTop","HTMLProjectionNode","documentNode","getComputedStyle","position","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","removeGroupControls","controls","dragControls","handleHoverEvent","lifecycle","handlePressEvent","HTMLButtonElement","disabled","observerCallbacks","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","observeIntersection","rootInteresectionObserver","lookupRoot","rootObservers","JSON","stringify","IntersectionObserver","initIntersectionObserver","observe","unobserve","thresholdNames","gestureAnimations","hasEnteredView","isInView","startObserver","viewport","margin","rootMargin","amount","once","threshold","isIntersecting","onViewportEnter","onViewportLeave","prevViewport","hasViewportOptionChanged","press","_element","endEvent","success","useGlobalTarget","globalTapTarget","onFocus","isFocusVisible","matches","e","onBlur","prefersReducedMotion","hasReducedMotionListener","visualElementStore","propEventHandlers","VisualElement","_props","_prevProps","_visualElement","KeyframeResolver","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","triggerBuild","renderInstance","renderScheduledAt","baseTarget","initialValues","initialMotionValues","removeFromVariantTree","addVariantChild","bindToMotionValue","matchMedia","motionMediaQuery","setReducedMotionPreferences","feature","valueIsTransform","onBindTransform","removeOnChange","on","latestValue","removeOnRenderRequest","removeSyncCheck","MotionCheckAppearSync","owner","other","sortInstanceNodePosition","featureDefinition","FeatureConstructor","build","measureInstanceViewportBox","getStaticValue","listener","nextValue","prevValue","existingValue","jump","hasAnimated","removeValue","updateMotionValuesFromProps","handleChildMotionValue","getVariant","getClosestVariantNode","closestVariantNode","unsubscribe","removeValueFromRenderState","defaultValue","readValue","getBaseTargetFromProps","readValueFromInstance","isNumericalString","isZeroValueString","findValueType","getAnimatableNone","setBaseTarget","valueFromInitial","DOMVisualElement","DOMKeyframesResolver","compareDocumentPosition","childSubscription","textContent","renderHTML","elementStyle","setProperty","HTMLVisualElement","defaultTransformValue","readTransformValue","computedStyle","getPropertyValue","camelCaseAttributes","SVGVisualElement","defaultType","getDefaultValueType","getAttribute","_styleProp","setAttribute","renderSVG","tagName","motion"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129]}